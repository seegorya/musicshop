//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace mozzhhevelnik.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class salondtbEntities : DbContext
    {
        public salondtbEntities()
            : base("name=salondtbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<customers> customers { get; set; }
        public virtual DbSet<disks> disks { get; set; }
        public virtual DbSet<order> order { get; set; }
        public virtual DbSet<ordetails> ordetails { get; set; }
        public virtual DbSet<supplier> supplier { get; set; }
        public virtual DbSet<supplyment> supplyment { get; set; }
    
        public virtual ObjectResult<Nullable<int>> Insert_User(string login, string contact, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var contactParameter = contact != null ?
                new ObjectParameter("contact", contact) :
                new ObjectParameter("contact", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Insert_User", loginParameter, contactParameter, passwordParameter);
        }
    
        public virtual ObjectResult<LoginByUsernamePassword_Result> LoginByUsernamePassword(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LoginByUsernamePassword_Result>("LoginByUsernamePassword", loginParameter, passwordParameter);
        }
    
        public virtual int PlacePrder(Nullable<int> ordid, Nullable<int> cdid, Nullable<int> amount, Nullable<double> price)
        {
            var ordidParameter = ordid.HasValue ?
                new ObjectParameter("ordid", ordid) :
                new ObjectParameter("ordid", typeof(int));
    
            var cdidParameter = cdid.HasValue ?
                new ObjectParameter("cdid", cdid) :
                new ObjectParameter("cdid", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PlacePrder", ordidParameter, cdidParameter, amountParameter, priceParameter);
        }
    
        public virtual int InSumm(Nullable<int> id, Nullable<double> summ)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var summParameter = summ.HasValue ?
                new ObjectParameter("summ", summ) :
                new ObjectParameter("summ", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InSumm", idParameter, summParameter);
        }
    
        public virtual int selectId(string login, Nullable<int> id)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("selectId", loginParameter, idParameter);
        }
    }
}
